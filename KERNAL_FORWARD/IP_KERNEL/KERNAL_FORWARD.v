// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="KERNAL_FORWARD_KERNAL_FORWARD,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5720,HLS_SYN_LUT=8430,HLS_VERSION=2022_2}" *)

module KERNAL_FORWARD (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 58'd1;
parameter    ap_ST_fsm_state2 = 58'd2;
parameter    ap_ST_fsm_state3 = 58'd4;
parameter    ap_ST_fsm_state4 = 58'd8;
parameter    ap_ST_fsm_state5 = 58'd16;
parameter    ap_ST_fsm_state6 = 58'd32;
parameter    ap_ST_fsm_state7 = 58'd64;
parameter    ap_ST_fsm_state8 = 58'd128;
parameter    ap_ST_fsm_state9 = 58'd256;
parameter    ap_ST_fsm_state10 = 58'd512;
parameter    ap_ST_fsm_state11 = 58'd1024;
parameter    ap_ST_fsm_state12 = 58'd2048;
parameter    ap_ST_fsm_state13 = 58'd4096;
parameter    ap_ST_fsm_state14 = 58'd8192;
parameter    ap_ST_fsm_state15 = 58'd16384;
parameter    ap_ST_fsm_state16 = 58'd32768;
parameter    ap_ST_fsm_state17 = 58'd65536;
parameter    ap_ST_fsm_state18 = 58'd131072;
parameter    ap_ST_fsm_state19 = 58'd262144;
parameter    ap_ST_fsm_state20 = 58'd524288;
parameter    ap_ST_fsm_state21 = 58'd1048576;
parameter    ap_ST_fsm_state22 = 58'd2097152;
parameter    ap_ST_fsm_state23 = 58'd4194304;
parameter    ap_ST_fsm_state24 = 58'd8388608;
parameter    ap_ST_fsm_state25 = 58'd16777216;
parameter    ap_ST_fsm_state26 = 58'd33554432;
parameter    ap_ST_fsm_state27 = 58'd67108864;
parameter    ap_ST_fsm_state28 = 58'd134217728;
parameter    ap_ST_fsm_state29 = 58'd268435456;
parameter    ap_ST_fsm_state30 = 58'd536870912;
parameter    ap_ST_fsm_state31 = 58'd1073741824;
parameter    ap_ST_fsm_state32 = 58'd2147483648;
parameter    ap_ST_fsm_state33 = 58'd4294967296;
parameter    ap_ST_fsm_state34 = 58'd8589934592;
parameter    ap_ST_fsm_state35 = 58'd17179869184;
parameter    ap_ST_fsm_state36 = 58'd34359738368;
parameter    ap_ST_fsm_state37 = 58'd68719476736;
parameter    ap_ST_fsm_state38 = 58'd137438953472;
parameter    ap_ST_fsm_state39 = 58'd274877906944;
parameter    ap_ST_fsm_state40 = 58'd549755813888;
parameter    ap_ST_fsm_state41 = 58'd1099511627776;
parameter    ap_ST_fsm_state42 = 58'd2199023255552;
parameter    ap_ST_fsm_state43 = 58'd4398046511104;
parameter    ap_ST_fsm_state44 = 58'd8796093022208;
parameter    ap_ST_fsm_state45 = 58'd17592186044416;
parameter    ap_ST_fsm_state46 = 58'd35184372088832;
parameter    ap_ST_fsm_state47 = 58'd70368744177664;
parameter    ap_ST_fsm_state48 = 58'd140737488355328;
parameter    ap_ST_fsm_state49 = 58'd281474976710656;
parameter    ap_ST_fsm_state50 = 58'd562949953421312;
parameter    ap_ST_fsm_state51 = 58'd1125899906842624;
parameter    ap_ST_fsm_state52 = 58'd2251799813685248;
parameter    ap_ST_fsm_state53 = 58'd4503599627370496;
parameter    ap_ST_fsm_state54 = 58'd9007199254740992;
parameter    ap_ST_fsm_state55 = 58'd18014398509481984;
parameter    ap_ST_fsm_state56 = 58'd36028797018963968;
parameter    ap_ST_fsm_state57 = 58'd72057594037927936;
parameter    ap_ST_fsm_state58 = 58'd144115188075855872;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (512 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] C;
wire   [31:0] M;
wire   [31:0] K;
wire   [31:0] N;
reg    gmem0_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem0_blk_n_W;
wire    ap_CS_fsm_state53;
reg    gmem0_blk_n_B;
wire    ap_CS_fsm_state58;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_state20;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_state13;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_720_p2;
reg   [31:0] reg_730;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state48;
reg  signed [31:0] N_read_reg_1543;
reg   [31:0] K_read_reg_1551;
reg  signed [31:0] M_read_reg_1558;
reg   [63:0] B_read_reg_1564;
reg   [63:0] A_read_reg_1569;
wire   [30:0] trunc_ln22_fu_736_p1;
reg   [30:0] trunc_ln22_reg_1574;
reg   [0:0] tmp_1_reg_1579;
reg   [26:0] p_lshr_f_cast_reg_1584;
wire   [0:0] icmp_ln47_fu_758_p2;
reg   [0:0] icmp_ln47_reg_1589;
wire   [0:0] cmp27_fu_764_p2;
reg   [0:0] cmp27_reg_1594;
reg   [63:0] gmem0_addr_reg_1599;
wire   [5:0] trunc_ln73_fu_790_p1;
reg   [5:0] trunc_ln73_reg_1605;
wire   [31:0] empty_fu_815_p3;
reg   [31:0] empty_reg_1610;
wire    ap_CS_fsm_state2;
wire  signed [58:0] sext_ln47_fu_862_p1;
reg  signed [58:0] sext_ln47_reg_1775;
wire   [31:0] zext_ln47_1_fu_873_p1;
reg   [31:0] zext_ln47_1_reg_1780;
wire   [61:0] zext_ln47_fu_877_p1;
reg   [61:0] zext_ln47_reg_1785;
wire   [63:0] mul_ln22_fu_886_p2;
reg   [63:0] mul_ln22_reg_1790;
wire   [0:0] icmp_ln50_fu_907_p2;
reg   [0:0] icmp_ln50_reg_1798;
wire    ap_CS_fsm_state4;
wire   [63:0] add_ln47_fu_917_p2;
reg   [63:0] add_ln47_reg_1806;
wire   [30:0] select_ln47_2_fu_932_p3;
reg   [30:0] select_ln47_2_reg_1811;
wire   [0:0] icmp_ln47_1_fu_912_p2;
reg   [63:0] gmem0_addr_1_reg_1816;
wire   [30:0] select_ln47_1_fu_982_p3;
reg   [30:0] select_ln47_1_reg_1822;
wire    ap_CS_fsm_state11;
reg   [4:0] block_qs_addr_32_reg_1827;
wire   [58:0] zext_ln56_fu_1007_p1;
reg   [58:0] zext_ln56_reg_1832;
wire   [30:0] add_ln56_fu_1020_p2;
reg   [30:0] add_ln56_reg_1840;
wire    ap_CS_fsm_state12;
wire   [58:0] add_ln68_fu_1026_p2;
reg   [58:0] add_ln68_reg_1845;
wire   [0:0] icmp_ln56_fu_1015_p2;
wire   [5:0] add_ln73_3_fu_1096_p2;
reg   [5:0] add_ln73_3_reg_1850;
wire   [0:0] icmp_ln73_fu_1102_p2;
reg   [0:0] icmp_ln73_reg_1855;
reg   [57:0] trunc_ln2_reg_1859;
wire   [31:0] select_ln73_fu_1118_p3;
reg   [31:0] select_ln73_reg_1864;
wire   [31:0] a_val_fu_1154_p1;
reg   [31:0] a_val_reg_1875;
reg   [511:0] gmem1_addr_read_reg_1880;
wire   [15:0] trunc_ln73_5_fu_1182_p1;
reg   [15:0] trunc_ln73_5_reg_1890;
wire    ap_CS_fsm_state22;
reg   [7:0] tmp_3_reg_1895;
reg   [7:0] tmp_4_reg_1900;
reg   [7:0] tmp_5_reg_1905;
reg   [7:0] tmp_6_reg_1910;
reg   [7:0] tmp_7_reg_1915;
reg   [7:0] tmp_8_reg_1920;
reg   [7:0] tmp_9_reg_1925;
reg   [7:0] tmp_10_reg_1930;
reg   [7:0] tmp_11_reg_1935;
reg   [7:0] tmp_12_reg_1940;
reg   [7:0] tmp_13_reg_1945;
reg   [7:0] tmp_14_reg_1950;
reg   [7:0] tmp_15_reg_1955;
reg   [7:0] tmp_16_reg_1960;
reg   [7:0] tmp_17_reg_1965;
reg   [7:0] tmp_18_reg_1970;
reg   [7:0] tmp_19_reg_1975;
reg   [7:0] tmp_20_reg_1980;
reg   [7:0] tmp_21_reg_1985;
reg   [7:0] tmp_22_reg_1990;
reg   [7:0] tmp_23_reg_1995;
reg   [7:0] tmp_24_reg_2000;
reg   [7:0] tmp_25_reg_2005;
reg   [7:0] tmp_26_reg_2010;
reg   [7:0] tmp_27_reg_2015;
reg   [7:0] tmp_28_reg_2020;
reg   [7:0] tmp_29_reg_2025;
reg   [7:0] tmp_30_reg_2030;
reg   [7:0] tmp_31_reg_2035;
reg   [7:0] tmp_32_reg_2040;
wire    ap_CS_fsm_state39;
wire   [31:0] d_fu_727_p1;
reg   [31:0] d_reg_2050;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_724_p1;
reg   [31:0] conv_reg_2055;
wire   [31:0] grp_fu_715_p2;
wire    ap_CS_fsm_state52;
reg   [4:0] block_qs_address0;
reg    block_qs_ce0;
reg    block_qs_we0;
reg   [7:0] block_qs_d0;
wire   [7:0] block_qs_q0;
reg   [4:0] block_qs_address1;
reg    block_qs_ce1;
reg    block_qs_we1;
reg   [7:0] block_qs_d1;
reg    gmem0_AWVALID;
wire    gmem0_AWREADY;
reg    gmem0_WVALID;
wire    gmem0_WREADY;
wire   [31:0] gmem0_WDATA;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [31:0] gmem0_RDATA;
wire   [8:0] gmem0_RFIFONUM;
wire    gmem0_BVALID;
reg    gmem0_BREADY;
wire    gmem1_AWREADY;
wire    gmem1_WREADY;
reg    gmem1_ARVALID;
wire    gmem1_ARREADY;
wire    gmem1_RVALID;
reg    gmem1_RREADY;
wire   [511:0] gmem1_RDATA;
wire   [8:0] gmem1_RFIFONUM;
wire    gmem1_BVALID;
reg   [30:0] k_reg_670;
reg   [31:0] sum_reg_681;
reg   [58:0] phi_mul_reg_693;
reg   [511:0] empty_59_reg_704;
wire   [63:0] idxprom151_fu_1002_p1;
wire  signed [63:0] sext_ln47_1_fu_780_p1;
wire  signed [63:0] sext_ln47_2_fu_972_p1;
wire   [63:0] sext_ln73_fu_1144_p1;
reg    ap_block_state20;
reg   [30:0] n_fu_342;
wire   [30:0] add_ln50_fu_1126_p2;
reg   [30:0] m_fu_346;
reg   [63:0] indvar_flatten_fu_350;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_720_p0;
reg   [31:0] grp_fu_720_p1;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state46;
wire  signed [31:0] grp_fu_724_p0;
wire   [15:0] d_fu_727_p0;
wire  signed [31:0] tmp_1_fu_740_p1;
wire  signed [31:0] p_lshr_f_cast_fu_748_p1;
wire  signed [31:0] icmp_ln47_fu_758_p0;
wire  signed [31:0] cmp27_fu_764_p0;
wire   [61:0] trunc_ln1_fu_770_p4;
wire   [31:0] mul_ln47_fu_804_p2;
wire   [31:0] select_ln47_fu_808_p3;
wire   [31:0] p_neg_fu_822_p2;
wire   [26:0] p_lshr_cast_fu_827_p4;
wire   [27:0] p_lshr_cast_cast_fu_837_p1;
wire   [27:0] p_neg_t_fu_841_p2;
wire   [27:0] p_lshr_f_cast_cast_fu_847_p1;
wire   [27:0] div_fu_850_p3;
wire   [0:0] cmp64_fu_857_p2;
wire   [30:0] empty_57_fu_866_p3;
wire   [31:0] mul_ln22_fu_886_p0;
wire   [31:0] mul_ln22_fu_886_p1;
wire   [31:0] zext_ln50_fu_903_p1;
wire   [30:0] add_ln47_2_fu_926_p2;
wire   [30:0] mul_ln47_1_fu_944_p0;
wire   [31:0] mul_ln47_1_fu_944_p1;
wire   [61:0] mul_ln47_1_fu_944_p2;
wire   [63:0] sext_ln56_mid2_v_v_v_v_fu_949_p3;
wire   [63:0] add_ln47_1_fu_957_p2;
wire   [61:0] sext_ln56_mid2_v_fu_962_p4;
wire   [4:0] idx_in_block_fu_988_p1;
wire   [25:0] div10_udiv_fu_992_p4;
wire   [31:0] zext_ln56_1_fu_1011_p1;
wire   [58:0] add_ln69_fu_1031_p2;
wire   [59:0] shl_ln73_2_fu_1044_p3;
wire   [4:0] trunc_ln73_2_fu_1056_p1;
wire   [0:0] trunc_ln73_4_fu_1068_p1;
wire  signed [63:0] sext_ln73_1_fu_1052_p1;
wire   [63:0] add_ln73_1_fu_1080_p2;
wire   [63:0] shl_ln73_1_fu_1036_p3;
wire   [5:0] trunc_ln73_1_fu_1060_p3;
wire   [5:0] add_ln73_2_fu_1091_p2;
wire   [5:0] trunc_ln73_3_fu_1072_p3;
wire   [63:0] add_ln73_fu_1085_p2;
wire   [8:0] shl_ln_fu_1165_p3;
wire   [1023:0] tmp_fu_1158_p3;
wire   [1023:0] zext_ln73_fu_1172_p1;
wire   [1023:0] lshr_ln73_fu_1176_p2;
reg   [57:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
wire   [63:0] mul_ln22_fu_886_p00;
wire   [63:0] mul_ln22_fu_886_p10;
wire   [61:0] mul_ln47_1_fu_944_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 58'd1;
end

KERNAL_FORWARD_block_qs_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
block_qs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(block_qs_address0),
    .ce0(block_qs_ce0),
    .we0(block_qs_we0),
    .d0(block_qs_d0),
    .q0(block_qs_q0),
    .address1(block_qs_address1),
    .ce1(block_qs_ce1),
    .we1(block_qs_we1),
    .d1(block_qs_d1)
);

KERNAL_FORWARD_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .C(C),
    .M(M),
    .K(K),
    .N(N),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

KERNAL_FORWARD_gmem0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(gmem0_addr_1_reg_1816),
    .I_ARLEN(zext_ln47_1_reg_1780),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RFIFONUM(gmem0_RFIFONUM),
    .I_AWVALID(gmem0_AWVALID),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(gmem0_addr_reg_1599),
    .I_AWLEN(empty_reg_1610),
    .I_WVALID(gmem0_WVALID),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(gmem0_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(gmem0_BREADY)
);

KERNAL_FORWARD_gmem1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem1_ARVALID),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(sext_ln73_fu_1144_p1),
    .I_ARLEN(select_ln73_reg_1864),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(gmem1_RREADY),
    .I_RDATA(gmem1_RDATA),
    .I_RFIFONUM(gmem1_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(512'd0),
    .I_WSTRB(64'd0),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(1'b0)
);

KERNAL_FORWARD_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_reg_681),
    .din1(reg_730),
    .ce(1'b1),
    .dout(grp_fu_715_p2)
);

KERNAL_FORWARD_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_720_p0),
    .din1(grp_fu_720_p1),
    .ce(1'b1),
    .dout(grp_fu_720_p2)
);

KERNAL_FORWARD_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_724_p0),
    .ce(1'b1),
    .dout(grp_fu_724_p1)
);

KERNAL_FORWARD_hptosp_16ns_32_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
hptosp_16ns_32_1_no_dsp_1_U4(
    .din0(d_fu_727_p0),
    .dout(d_fu_727_p1)
);

KERNAL_FORWARD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(N_read_reg_1543),
    .din1(M_read_reg_1558),
    .dout(mul_ln47_fu_804_p2)
);

KERNAL_FORWARD_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U6(
    .din0(mul_ln22_fu_886_p0),
    .din1(mul_ln22_fu_886_p1),
    .dout(mul_ln22_fu_886_p2)
);

KERNAL_FORWARD_mul_31ns_32ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_31ns_32ns_62_1_1_U7(
    .din0(mul_ln47_1_fu_944_p0),
    .din1(mul_ln47_1_fu_944_p1),
    .dout(mul_ln47_1_fu_944_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten_fu_350 <= 64'd0;
    end else if (((icmp_ln56_fu_1015_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        indvar_flatten_fu_350 <= add_ln47_reg_1806;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_reg_670 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        k_reg_670 <= add_ln56_reg_1840;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_fu_346 <= 31'd0;
    end else if (((icmp_ln56_fu_1015_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        m_fu_346 <= select_ln47_2_reg_1811;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_fu_342 <= 31'd0;
    end else if (((icmp_ln56_fu_1015_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        n_fu_342 <= add_ln50_fu_1126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul_reg_693 <= 59'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        phi_mul_reg_693 <= add_ln68_reg_1845;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_reg_681 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_reg_681 <= grp_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        A_read_reg_1569 <= A;
        B_read_reg_1564 <= B;
        K_read_reg_1551 <= K;
        M_read_reg_1558 <= M;
        N_read_reg_1543 <= N;
        cmp27_reg_1594 <= cmp27_fu_764_p2;
        gmem0_addr_reg_1599 <= sext_ln47_1_fu_780_p1;
        icmp_ln47_reg_1589 <= icmp_ln47_fu_758_p2;
        p_lshr_f_cast_reg_1584 <= {{p_lshr_f_cast_fu_748_p1[31:5]}};
        tmp_1_reg_1579 <= tmp_1_fu_740_p1[32'd31];
        trunc_ln22_reg_1574 <= trunc_ln22_fu_736_p1;
        trunc_ln73_reg_1605 <= trunc_ln73_fu_790_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        a_val_reg_1875 <= a_val_fu_1154_p1;
        gmem1_addr_read_reg_1880 <= gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln47_reg_1806 <= add_ln47_fu_917_p2;
        icmp_ln50_reg_1798 <= icmp_ln50_fu_907_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln56_reg_1840 <= add_ln56_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_1015_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        add_ln68_reg_1845 <= add_ln68_fu_1026_p2;
        add_ln73_3_reg_1850 <= add_ln73_3_fu_1096_p2;
        icmp_ln73_reg_1855 <= icmp_ln73_fu_1102_p2;
        select_ln73_reg_1864[1 : 0] <= select_ln73_fu_1118_p3[1 : 0];
        trunc_ln2_reg_1859 <= {{add_ln73_fu_1085_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        block_qs_addr_32_reg_1827 <= idxprom151_fu_1002_p1;
        select_ln47_1_reg_1822 <= select_ln47_1_fu_982_p3;
        zext_ln56_reg_1832[25 : 0] <= zext_ln56_fu_1007_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        conv_reg_2055 <= grp_fu_724_p1;
        d_reg_2050 <= d_fu_727_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        empty_59_reg_704 <= gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_1610 <= empty_fu_815_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_1_fu_912_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem0_addr_1_reg_1816 <= sext_ln47_2_fu_972_p1;
        select_ln47_2_reg_1811 <= select_ln47_2_fu_932_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln22_reg_1790 <= mul_ln22_fu_886_p2;
        sext_ln47_reg_1775 <= sext_ln47_fu_862_p1;
        zext_ln47_1_reg_1780[30 : 0] <= zext_ln47_1_fu_873_p1[30 : 0];
        zext_ln47_reg_1785[31 : 0] <= zext_ln47_fu_877_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_730 <= grp_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_10_reg_1930 <= {{lshr_ln73_fu_1176_p2[95:88]}};
        tmp_11_reg_1935 <= {{lshr_ln73_fu_1176_p2[103:96]}};
        tmp_12_reg_1940 <= {{lshr_ln73_fu_1176_p2[111:104]}};
        tmp_13_reg_1945 <= {{lshr_ln73_fu_1176_p2[119:112]}};
        tmp_14_reg_1950 <= {{lshr_ln73_fu_1176_p2[127:120]}};
        tmp_15_reg_1955 <= {{lshr_ln73_fu_1176_p2[135:128]}};
        tmp_16_reg_1960 <= {{lshr_ln73_fu_1176_p2[143:136]}};
        tmp_17_reg_1965 <= {{lshr_ln73_fu_1176_p2[151:144]}};
        tmp_18_reg_1970 <= {{lshr_ln73_fu_1176_p2[159:152]}};
        tmp_19_reg_1975 <= {{lshr_ln73_fu_1176_p2[167:160]}};
        tmp_20_reg_1980 <= {{lshr_ln73_fu_1176_p2[175:168]}};
        tmp_21_reg_1985 <= {{lshr_ln73_fu_1176_p2[183:176]}};
        tmp_22_reg_1990 <= {{lshr_ln73_fu_1176_p2[191:184]}};
        tmp_23_reg_1995 <= {{lshr_ln73_fu_1176_p2[199:192]}};
        tmp_24_reg_2000 <= {{lshr_ln73_fu_1176_p2[207:200]}};
        tmp_25_reg_2005 <= {{lshr_ln73_fu_1176_p2[215:208]}};
        tmp_26_reg_2010 <= {{lshr_ln73_fu_1176_p2[223:216]}};
        tmp_27_reg_2015 <= {{lshr_ln73_fu_1176_p2[231:224]}};
        tmp_28_reg_2020 <= {{lshr_ln73_fu_1176_p2[239:232]}};
        tmp_29_reg_2025 <= {{lshr_ln73_fu_1176_p2[247:240]}};
        tmp_30_reg_2030 <= {{lshr_ln73_fu_1176_p2[255:248]}};
        tmp_31_reg_2035 <= {{lshr_ln73_fu_1176_p2[263:256]}};
        tmp_32_reg_2040 <= {{lshr_ln73_fu_1176_p2[271:264]}};
        tmp_3_reg_1895 <= {{lshr_ln73_fu_1176_p2[39:32]}};
        tmp_4_reg_1900 <= {{lshr_ln73_fu_1176_p2[47:40]}};
        tmp_5_reg_1905 <= {{lshr_ln73_fu_1176_p2[55:48]}};
        tmp_6_reg_1910 <= {{lshr_ln73_fu_1176_p2[63:56]}};
        tmp_7_reg_1915 <= {{lshr_ln73_fu_1176_p2[71:64]}};
        tmp_8_reg_1920 <= {{lshr_ln73_fu_1176_p2[79:72]}};
        tmp_9_reg_1925 <= {{lshr_ln73_fu_1176_p2[87:80]}};
        trunc_ln73_5_reg_1890 <= trunc_ln73_5_fu_1182_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((gmem1_ARREADY == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((gmem1_RVALID == 1'b0) | (gmem0_RVALID == 1'b0))) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem1_RVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((gmem0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

always @ (*) begin
    if ((gmem0_WREADY == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

always @ (*) begin
    if ((gmem0_BVALID == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        block_qs_address0 = block_qs_addr_32_reg_1827;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        block_qs_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        block_qs_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        block_qs_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        block_qs_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        block_qs_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        block_qs_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        block_qs_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        block_qs_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        block_qs_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        block_qs_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        block_qs_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        block_qs_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        block_qs_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        block_qs_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        block_qs_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        block_qs_address0 = 64'd1;
    end else begin
        block_qs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        block_qs_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        block_qs_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        block_qs_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        block_qs_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        block_qs_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        block_qs_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        block_qs_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        block_qs_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        block_qs_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        block_qs_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        block_qs_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        block_qs_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        block_qs_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        block_qs_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        block_qs_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        block_qs_address1 = 64'd0;
    end else begin
        block_qs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        block_qs_ce0 = 1'b1;
    end else begin
        block_qs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        block_qs_ce1 = 1'b1;
    end else begin
        block_qs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        block_qs_d0 = tmp_32_reg_2040;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        block_qs_d0 = tmp_30_reg_2030;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        block_qs_d0 = tmp_28_reg_2020;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        block_qs_d0 = tmp_26_reg_2010;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        block_qs_d0 = tmp_24_reg_2000;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        block_qs_d0 = tmp_22_reg_1990;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        block_qs_d0 = tmp_20_reg_1980;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        block_qs_d0 = tmp_18_reg_1970;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        block_qs_d0 = tmp_16_reg_1960;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        block_qs_d0 = tmp_14_reg_1950;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        block_qs_d0 = tmp_12_reg_1940;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        block_qs_d0 = tmp_10_reg_1930;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        block_qs_d0 = tmp_8_reg_1920;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        block_qs_d0 = tmp_6_reg_1910;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        block_qs_d0 = tmp_4_reg_1900;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        block_qs_d0 = {{lshr_ln73_fu_1176_p2[31:24]}};
    end else begin
        block_qs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        block_qs_d1 = tmp_31_reg_2035;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        block_qs_d1 = tmp_29_reg_2025;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        block_qs_d1 = tmp_27_reg_2015;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        block_qs_d1 = tmp_25_reg_2005;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        block_qs_d1 = tmp_23_reg_1995;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        block_qs_d1 = tmp_21_reg_1985;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        block_qs_d1 = tmp_19_reg_1975;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        block_qs_d1 = tmp_17_reg_1965;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        block_qs_d1 = tmp_15_reg_1955;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        block_qs_d1 = tmp_13_reg_1945;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        block_qs_d1 = tmp_11_reg_1935;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        block_qs_d1 = tmp_9_reg_1925;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        block_qs_d1 = tmp_7_reg_1915;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        block_qs_d1 = tmp_5_reg_1905;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        block_qs_d1 = tmp_3_reg_1895;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        block_qs_d1 = {{lshr_ln73_fu_1176_p2[23:16]}};
    end else begin
        block_qs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        block_qs_we0 = 1'b1;
    end else begin
        block_qs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        block_qs_we1 = 1'b1;
    end else begin
        block_qs_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem0_AWVALID = 1'b1;
    end else begin
        gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        gmem0_BREADY = 1'b1;
    end else begin
        gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem1_RVALID == 1'b0) | (gmem0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state20))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        gmem0_WVALID = 1'b1;
    end else begin
        gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((gmem1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem1_ARVALID = 1'b1;
    end else begin
        gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem1_RVALID == 1'b0) | (gmem0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | ((gmem1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem1_RREADY = 1'b1;
    end else begin
        gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_720_p0 = a_val_reg_1875;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_720_p0 = conv_reg_2055;
    end else begin
        grp_fu_720_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_720_p1 = reg_730;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_720_p1 = d_reg_2050;
    end else begin
        grp_fu_720_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln47_1_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln56_fu_1015_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if ((~((gmem1_RVALID == 1'b0) | (gmem0_RVALID == 1'b0)) & (icmp_ln73_reg_1855 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if ((~((gmem1_RVALID == 1'b0) | (gmem0_RVALID == 1'b0)) & (icmp_ln73_reg_1855 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((gmem1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state53 : begin
            if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_val_fu_1154_p1 = gmem0_RDATA;

assign add_ln47_1_fu_957_p2 = (sext_ln56_mid2_v_v_v_v_fu_949_p3 + A_read_reg_1569);

assign add_ln47_2_fu_926_p2 = (m_fu_346 + 31'd1);

assign add_ln47_fu_917_p2 = (indvar_flatten_fu_350 + 64'd1);

assign add_ln50_fu_1126_p2 = (select_ln47_1_reg_1822 + 31'd1);

assign add_ln56_fu_1020_p2 = (k_reg_670 + 31'd1);

assign add_ln68_fu_1026_p2 = ($signed(phi_mul_reg_693) + $signed(sext_ln47_reg_1775));

assign add_ln69_fu_1031_p2 = (phi_mul_reg_693 + zext_ln56_reg_1832);

assign add_ln73_1_fu_1080_p2 = ($signed(sext_ln73_1_fu_1052_p1) + $signed(B_read_reg_1564));

assign add_ln73_2_fu_1091_p2 = (trunc_ln73_1_fu_1060_p3 + trunc_ln73_reg_1605);

assign add_ln73_3_fu_1096_p2 = (add_ln73_2_fu_1091_p2 + trunc_ln73_3_fu_1072_p3);

assign add_ln73_fu_1085_p2 = (add_ln73_1_fu_1080_p2 + shl_ln73_1_fu_1036_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

always @ (*) begin
    ap_block_state20 = ((gmem1_RVALID == 1'b0) | (gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp27_fu_764_p0 = N;

assign cmp27_fu_764_p2 = (($signed(cmp27_fu_764_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign cmp64_fu_857_p2 = (($signed(K_read_reg_1551) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign d_fu_727_p0 = trunc_ln73_5_reg_1890;

assign div10_udiv_fu_992_p4 = {{select_ln47_1_fu_982_p3[30:5]}};

assign div_fu_850_p3 = ((tmp_1_reg_1579[0:0] == 1'b1) ? p_neg_t_fu_841_p2 : p_lshr_f_cast_cast_fu_847_p1);

assign empty_57_fu_866_p3 = ((cmp64_fu_857_p2[0:0] == 1'b1) ? trunc_ln22_reg_1574 : 31'd0);

assign empty_fu_815_p3 = ((icmp_ln47_reg_1589[0:0] == 1'b1) ? select_ln47_fu_808_p3 : 32'd0);

assign gmem0_WDATA = sum_reg_681;

assign grp_fu_724_p0 = $signed(block_qs_q0);

assign icmp_ln47_1_fu_912_p2 = ((indvar_flatten_fu_350 == mul_ln22_reg_1790) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_758_p0 = M;

assign icmp_ln47_fu_758_p2 = (($signed(icmp_ln47_fu_758_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_907_p2 = (($signed(zext_ln50_fu_903_p1) < $signed(N_read_reg_1543)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1015_p2 = (($signed(zext_ln56_1_fu_1011_p1) < $signed(K_read_reg_1551)) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_1102_p2 = ((add_ln73_3_fu_1096_p2 > 6'd30) ? 1'b1 : 1'b0);

assign idx_in_block_fu_988_p1 = select_ln47_1_fu_982_p3[4:0];

assign idxprom151_fu_1002_p1 = idx_in_block_fu_988_p1;

assign lshr_ln73_fu_1176_p2 = tmp_fu_1158_p3 >> zext_ln73_fu_1172_p1;

assign mul_ln22_fu_886_p0 = mul_ln22_fu_886_p00;

assign mul_ln22_fu_886_p00 = $unsigned(M_read_reg_1558);

assign mul_ln22_fu_886_p1 = mul_ln22_fu_886_p10;

assign mul_ln22_fu_886_p10 = $unsigned(N_read_reg_1543);

assign mul_ln47_1_fu_944_p0 = mul_ln47_1_fu_944_p00;

assign mul_ln47_1_fu_944_p00 = select_ln47_2_fu_932_p3;

assign mul_ln47_1_fu_944_p1 = zext_ln47_reg_1785;

assign p_lshr_cast_cast_fu_837_p1 = p_lshr_cast_fu_827_p4;

assign p_lshr_cast_fu_827_p4 = {{p_neg_fu_822_p2[31:5]}};

assign p_lshr_f_cast_cast_fu_847_p1 = p_lshr_f_cast_reg_1584;

assign p_lshr_f_cast_fu_748_p1 = N;

assign p_neg_fu_822_p2 = ($signed(32'd0) - $signed(N_read_reg_1543));

assign p_neg_t_fu_841_p2 = (28'd0 - p_lshr_cast_cast_fu_837_p1);

assign select_ln47_1_fu_982_p3 = ((icmp_ln50_reg_1798[0:0] == 1'b1) ? n_fu_342 : 31'd0);

assign select_ln47_2_fu_932_p3 = ((icmp_ln50_fu_907_p2[0:0] == 1'b1) ? m_fu_346 : add_ln47_2_fu_926_p2);

assign select_ln47_fu_808_p3 = ((cmp27_reg_1594[0:0] == 1'b1) ? mul_ln47_fu_804_p2 : 32'd0);

assign select_ln73_fu_1118_p3 = ((icmp_ln73_fu_1102_p2[0:0] == 1'b1) ? 32'd2 : 32'd1);

assign sext_ln47_1_fu_780_p1 = $signed(trunc_ln1_fu_770_p4);

assign sext_ln47_2_fu_972_p1 = $signed(sext_ln56_mid2_v_fu_962_p4);

assign sext_ln47_fu_862_p1 = $signed(div_fu_850_p3);

assign sext_ln56_mid2_v_fu_962_p4 = {{add_ln47_1_fu_957_p2[63:2]}};

assign sext_ln56_mid2_v_v_v_v_fu_949_p3 = {{mul_ln47_1_fu_944_p2}, {2'd0}};

assign sext_ln73_1_fu_1052_p1 = $signed(shl_ln73_2_fu_1044_p3);

assign sext_ln73_fu_1144_p1 = $signed(trunc_ln2_reg_1859);

assign shl_ln73_1_fu_1036_p3 = {{add_ln69_fu_1031_p2}, {5'd0}};

assign shl_ln73_2_fu_1044_p3 = {{add_ln69_fu_1031_p2}, {1'd0}};

assign shl_ln_fu_1165_p3 = {{add_ln73_3_reg_1850}, {3'd0}};

assign tmp_1_fu_740_p1 = N;

assign tmp_fu_1158_p3 = {{empty_59_reg_704}, {gmem1_addr_read_reg_1880}};

assign trunc_ln1_fu_770_p4 = {{C[63:2]}};

assign trunc_ln22_fu_736_p1 = K[30:0];

assign trunc_ln73_1_fu_1060_p3 = {{trunc_ln73_2_fu_1056_p1}, {1'd0}};

assign trunc_ln73_2_fu_1056_p1 = add_ln69_fu_1031_p2[4:0];

assign trunc_ln73_3_fu_1072_p3 = {{trunc_ln73_4_fu_1068_p1}, {5'd0}};

assign trunc_ln73_4_fu_1068_p1 = add_ln69_fu_1031_p2[0:0];

assign trunc_ln73_5_fu_1182_p1 = lshr_ln73_fu_1176_p2[15:0];

assign trunc_ln73_fu_790_p1 = B[5:0];

assign zext_ln47_1_fu_873_p1 = empty_57_fu_866_p3;

assign zext_ln47_fu_877_p1 = K_read_reg_1551;

assign zext_ln50_fu_903_p1 = n_fu_342;

assign zext_ln56_1_fu_1011_p1 = k_reg_670;

assign zext_ln56_fu_1007_p1 = div10_udiv_fu_992_p4;

assign zext_ln73_fu_1172_p1 = shl_ln_fu_1165_p3;

always @ (posedge ap_clk) begin
    zext_ln47_1_reg_1780[31] <= 1'b0;
    zext_ln47_reg_1785[61:32] <= 30'b000000000000000000000000000000;
    zext_ln56_reg_1832[58:26] <= 33'b000000000000000000000000000000000;
    select_ln73_reg_1864[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //KERNAL_FORWARD
